<!-- 
ANT build script (ANT is a Java & XML based cross-platform build tool 
and available at http://jakarta.apache.org/ant/). 

author: whoschek@lbl.gov, piotr.wendykier@gmail.com 

See the target "usage" further below for instructions on how to build the software.
-->


<!-- ================================================================= -->
<!-- NOTE: all directories are relative to parallelcolt/                       -->
<!-- ================================================================= -->
<project name="parallelcolt" default="help" basedir=".">
	
	<property name="version" value="0.9.4" />

	<property name="compiler" value="javac1.5" />
	
	<property name="source" value="1.5" />
	
	<property name="target" value="1.5" />
	
	<property name="dist.dir" value="../${ant.project.name}-dist" />

	<property name="proj.title" value="ParallelColt" />

	<!-- The directories where *.java files are stored. -->
	<property name="javac.src" value="src" />
	<property name="javac.test" value="test" />
	<property name="javac.benchmark" value="benchmark" />
	
	<!-- Destination for *.class files -->
	<property name="javac.dest" value="bin" />

	<!-- Destination for documentation -->
	<property name="doc.dest" value="doc" />

	<!-- Location of jar files -->
	<property name="jar.dir" value="${basedir}" />

	<property name="lib.dir" value="lib" />
		
	
	<!-- The jar file that the jar task will generate -->
	<property name="jar.filename" value="${ant.project.name}-${version}.jar" />

	<!-- file patterns to be excluded from tar in dist targets -->
	<property name="src.tar.excludes" value="*/${javac.dest}/** */${jar.filename} */${doc.dest}/** */*.jardesc" />

	<property name="doc.tar.includes" value="${doc.dest}/**" />
	
	<property name="classpath" value="${lib.dir}/junit.jar:${lib.dir}/arpack-combo.jar:${lib.dir}/netlib-java.jar:${lib.dir}/jplasma.jar:${lib.dir}/jtransforms.jar:${lib.dir}/csparsej.jar:${lib.dir}/optimization.jar"/>

	<!-- ================================================================= -->
	<!-- Default target                                                    -->
	<!-- ================================================================= -->
	<target name="help">
		<echo>
First cd into the dir this build file is placed in:

	cd ParallelColt
	 	
Then type one of the following to build the software:

	ant -help         - Print help on general ant usage		
	ant help          - Print this help text		
	ant build         - Compile, generate jars, [javadoc]	 	
	ant doc           - Generate documentation
	ant dist          - Build and generate distribution downloads
	 	
Further individual targets used internally by above targets:
	
	javac             - Compile all *.java files into .class files	
	jar               - Generate jar file(s) from .class files	
</echo>
	</target>

	<!-- ================================================================= -->
	<!-- Remove all generated (compiled) class files.                      -->
	<!-- ================================================================= -->
	<target name="clean">
		<delete dir="${javac.dest}" />
		<delete file="${jar.dir}/${jar.filename}" />
	</target>


	<!-- ================================================================= -->
	<!-- Clean distribution.                                               -->
	<!-- ================================================================= -->
	<target name="clean-dist">
		<delete dir="${dist.dir}" />
	</target>


	<!-- ================================================================= -->
	<!-- Build the software (without generating a distribution)            -->
	<!-- ================================================================= -->
	<target name="build" depends="jar">
	</target>


	<!-- ================================================================= -->
	<!-- Compile all *.java files from ${javac.src}                        -->
	<!-- ================================================================= -->
	<target name="javac" depends="clean">
		<mkdir dir="${javac.dest}" />
		<javac classpath="${classpath}" srcdir="${javac.src}" destdir="${javac.dest}" includes="**/*.java" deprecation="on" debug="off" compiler="${compiler}" source="${source}" target="${target}">
		</javac>

	</target>

	<!-- ================================================================= -->
	<!-- Compile all *.java files from ${javac.test}                       -->
	<!-- ================================================================= -->
	<target name="javac-test" depends="clean">
		<mkdir dir="${javac.dest}" />
		<javac classpath="${classpath}" srcdir="${javac.test}" destdir="${javac.dest}" includes="**/*.java" deprecation="on" debug="off" compiler="${compiler}" source="${source}" target="${target}">
		</javac>
	</target>
	
	<!-- ================================================================= -->
	<!-- Compile all *.java files from ${javac.benchmark}                  -->
	<!-- ================================================================= -->
	<target name="javac-benchmark" depends="clean">
		<mkdir dir="${javac.dest}" />
		<javac classpath="${classpath}" srcdir="${javac.benchmark}" destdir="${javac.dest}" includes="**/*.java" deprecation="on" debug="off" compiler="${compiler}" source="${source}" target="${target}">
		</javac>
	</target>

	<!-- ================================================================= -->
	<!-- Generate jar file(s) from *.class files                           -->
	<!-- ================================================================= -->
	<target name="jar" depends="javac,javac-test,javac-benchmark">
		<mkdir dir="${jar.dir}" />
		<jar jarfile="${jar.dir}/${jar.filename}" basedir="${javac.dest}" index="no" compress="yes" manifest="${basedir}/META-INF/MANIFEST.MF"/>
	</target>


	<!-- ================================================================= -->
	<!-- Generate documentation					                           -->
	<!-- ================================================================= -->
	<target name="doc">

		<delete dir="${doc.dest}" />
		<mkdir dir="${doc.dest}" />
		<javadoc maxmemory = "256m" classpath="${classpath}" sourcepath="${javac.src}" destdir="${doc.dest}" public="true" author="true" use="true" splitIndex="true" version="true" doctitle="&lt;h2&gt;&lt;a target=_top href=http://sites.google.com/site/piotrwendykier/software/parallelcolt &gt;Parallel Colt&lt;/a&gt; &lt;/h2&gt;&lt;h4&gt;Open Source Libraries for High Performance Scientific and Technical Computing in Java&lt;/h4&gt;&lt;hr&gt;" windowtitle="Parallel Colt ${version} - API Specification" header="&lt;b&gt;Parallel Colt ${version}&lt;/b&gt;" bottom="&lt;font size=-1 &gt;Jump to the &lt;a target=_top href=http://sites.google.com/site/piotrwendykier/software/parallelcolt &gt;Parallel Colt Homepage&lt;/a&gt;">
			<packageset dir="${javac.src}" />
			<link href="http://java.sun.com/javase/6/docs/api/" />
		</javadoc>
	</target>


	<!-- ================================================================= -->
	<!-- Build a complete distribution. Results go to ${dist.dir} -->
	<!-- ================================================================= -->
	<target name="dist" depends="clean-dist, doc, build">

		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.dir}/${proj.title}" />
		<mkdir dir="${dist.dir}/${proj.title}/${lib.dir}" />		
		<copy todir="${dist.dir}/${proj.title}/${lib.dir}">
			<fileset dir="${lib.dir}" /> 
		</copy>
		<copy file="${jar.dir}/${jar.filename}" todir="${dist.dir}/${proj.title}"/>
		<copy file="license.txt" todir="${dist.dir}/${proj.title}"/>		
		<!-- ============================================================= -->
		<!-- Generate parallelcolt-bin.zip -->
		<zip zipfile="${dist.dir}/${ant.project.name}-${version}-bin.zip" basedir="${dist.dir}/" includes="${proj.title}/" />
		<!-- ============================================================= -->
		<!-- Generate parallelcolt-bin.tar.bz2 -->
		<tar tarfile="${dist.dir}/${ant.project.name}-${version}-bin.tar.bz2" basedir="${dist.dir}/" includes="${proj.title}/" compression="bzip2" longfile="gnu" />
		<delete dir="${dist.dir}/${proj.title}" />
		<!-- ============================================================= -->
		<!-- Generate parallelcolt-src.tar.bz2 -->
		<basename property="proj.basename" file="." />
		<tar tarfile="${dist.dir}/${ant.project.name}-${version}-src.tar.bz2" basedir=".." includes="${proj.basename}/" excludes="${src.tar.excludes}" compression="bzip2" longfile="gnu" />
		<!-- ============================================================= -->
		<!-- Generate parallelcolt-src.zip -->
		<zip zipfile="${dist.dir}/${ant.project.name}-${version}-src.zip" basedir=".." includes="${proj.basename}/" excludes="${src.tar.excludes}"/>
		<!-- ============================================================= -->
		<!-- Generate parallelcolt-doc.tar.bz2 -->
		<basename property="proj.basename" file="." />
		<tar tarfile="${dist.dir}/${ant.project.name}-${version}-doc.tar.bz2" basedir=".." includes="${proj.basename}/${doc.tar.includes}" compression="bzip2" longfile="gnu" />
		<!-- ============================================================= -->
		<!-- Generate parallelcolt-doc.zip -->
		<zip zipfile="${dist.dir}/${ant.project.name}-${version}-doc.zip" basedir=".." includes="${proj.basename}/${doc.tar.includes}" />

	</target>
	
	<target name="test" depends="jar">
		<junit printsummary="yes" fork="yes" haltonfailure="yes" showoutput="yes">
			<classpath path="${classpath}:${jar.dir}/${jar.filename}"/>
		  <formatter type="plain"/>
		  <test name="cern.colt.AllTests"/>
		</junit>
    </target>

</project>
